.forkme=partial 'forkme'

%section

  %h1 Election description

  %article

    .p
      An election is defined by a JSON file at some URI.  For example, see
      =succeed '.' do
        =partial 'codeview', locals: {modal_id: 'SimpleElectionModal', url: 'http://info.clearelection.org/examples/election0.json', contents: data.sample_election}
      An election definition includes, minimally:
    .p
      %dl.properties
        %dt schedule
        %dd
          The date &amp; time at which polls open, i.e. voting begins, and the 
          The date &amp; time at which polls close, i.e. voting ends.
        %dt contests
        %dd The list of contests, each including the list of candidates and attributes about how to vote

        %dt returns
        %dd (After the polls have closed) The returns data: voters and ballots.

        %dt agents
        %dd (For an online election) The URIs for the signin and booth agents. See discussion below.

    .p(style='text-align:left;')
      The syntax is specified by the JSON schema at
      =succeed "." do
        =partial 'codeview', locals: {modal_id: 'ElectionSchemaModal', url: 'http://schemas.clearelection.org/election-0.0.schema.json', contents: ClearElection::Schema.election(version: "0.0")}
      For detailed documentation, see
      %a(href="http://docs.clearelection.org")
        %span.url docs.clearelection.org
        %i.fa.fa-external-link

    .p
      The election data is (mostly) static.  When the election's manager
      first posts the election to its URI, it should include all data
      (except the
      %span.prop returns
      data if the voting hasn't happened yet), and that data should never change.
      Once the polls close, the manager should add the complete
      %span.prop returns
      data as a single atomic change.  After that the
      election data should remain unchanged in perpetuity.


    .p 
      The election data is intended to be as simple and straightforward
      as possible.  Accordingly, the schema does not address the "look &amp;
      feel" of the election, i.e., no fonts or images or other styling info.
      Styling could be an ehnanced feature offered by third-party election
      tools.

    .p 
      We provide SDKs for convenient access and management:

      %ul.sdk
        %li
          %a(href="http://rubygems.org/gems/clear-election-sdk")
            %span clear-election-sdk
            %i.fa.fa-external-link
          ruby gem
        %li
          .TODO.inline JavaScript SDK including tallying
     

%section

  %h1 Online Elections

  %article

    .p
      Online elections have four indepdendent components:

    .p
      %dl.components
        %dt Election Manager
        %dd.TODO Responsible for creating/updating the election URI.

        %dt Signin Agent
        %dd.TODO Responsible for authenticating/authorizing voters

        %dt Booth Agent
        %dd.TODO Responsible for gathering filled ballots anonymously.

        %dt Voting Client
        %dd.TODO Presents a UI to the voters, taking them from the Signin Agent (to sign in) to the Booth agent (to fill out and cast their ballots)

    .p

      The model for online voting is analogous to how a real-live polling place might work:

    .p

      %ol
        %li You go to the signin desk, identify yourself to the agent there.
        %li The Signin Agent checks you against the voter roll, and notes down that you signed in.
        %li The Signin Agent gives you a ticket and says "take this over to the voting booth and give it to the agent there".
        %li You go the voting booth, and give your ticket to the agent.
        %li The Booth Agent checks that your ticket is legit.
        %li The Booth Agent hands you a ballot.
        %li You fill in your ballot, then cast it in the ballot box.
      When polls close, the Election Manager gathers the list of signed-in voters from the Signin Agent and gathers the collection of ballots from the Ballot Agent.


%section

  %h1 Open Source

  %article

    .p 
      ClearElection is an open source project.  All sources, schema
      definitions, protocols, documents, etc. are mastered online:

      .callout
        %a.url(href="https://github.com/clearelection")
          https://github.com/clearelection
          %i.fa.fa-external-link

      The overall development roadmap is at:

      .callout
        %a.url(href="https://github.com/clearelection/roadmap")
          https://github.com/clearelection/roadmap
          %i.fa.fa-external-link  
            
    .p
      We welcome comments, suggestions, and contributions!
